parameters:
  extRepoUrl : ''
  extRepoDir : ''
  enableRegression: false
  HelperBranch : 'master'

jobs:
  - job:
    displayName: Code Sign and Verify
    pool: 
      name: TestSuiteESRPCodeSignPool
    workspace:
      clean: false
    timeoutInMinutes: 0

    steps:
      - task: CopyFiles@2
        displayName: 'Copy TestSuite'
        inputs:
          SourceFolder: '$(Build.Repository.LocalPath)'
          TargetFolder: '$(Build.BinariesDirectory)'
          CleanTargetFolder: true

      - script: 'git clone -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" -b %HelperBranch% %EXTREPO_URL% %EXTREPO_DIR% 2>&1'
        displayName: 'Fetch external repo'
        env:
          EXTREPO_URL: ${{parameters.extRepoUrl}}
          EXTREPO_DIR: ${{parameters.extRepoDir}}
          HelperBranch: ${{parameters.HelperBranch}}
        timeoutInMinutes: 0

      - task: CopyFiles@2
        displayName: 'Copy CodeSign files'
        inputs:
          SourceFolder: '${{parameters.extRepoDir}}/CodeSign'
          TargetFolder: '$(Build.BinariesDirectory)/CodeSign'

      - task: CopyFiles@2
        displayName: 'Copy RDMA'
        inputs:
          SourceFolder: '${{parameters.extRepoDir}}/ProtoSDK/RDMA'
          TargetFolder: '$(Build.BinariesDirectory)/ProtoSDK/RDMA'

      - task: PowerShell@2
        displayName: 'Run code sign script'
        inputs:
          targetType: filePath
          filePath: '$(Build.BinariesDirectory)/CodeSign/Execute-SignTestSuites.ps1'
          arguments: '-TestSuiteName $(test.testSuiteName)'
          workingDirectory: '$(Build.BinariesDirectory)/CodeSign'
          errorActionPreference: continue

      - task: CopyFiles@2
        displayName: 'Copy MSI' 
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)/drop'
          Contents: '**\*.msi'
          TargetFolder: '$(Build.StagingDirectory)'
          OverWrite: true
          flattenFolders: true

      - task: PowerShell@2
        displayName: 'Verify CodeSign '
        continueOnError: true
        inputs:
          targetType: 'inline'
          script: |
            New-Item -Path "$(Build.BinariesDirectory)/Inputs" -ItemType Directory -Force
            Copy-Item -Path "$(Build.StagingDirectory)/*.msi" -Destination "$(Build.BinariesDirectory)/Inputs" -Recurse -Force
            New-Item -Path "$(Build.BinariesDirectory)/Results" -ItemType Directory -Force
            Get-ChildItem -Path "$(Build.BinariesDirectory)/Inputs" -Filter "*.msi" | Foreach-Object { $(Build.BinariesDirectory)/CodeSign/Test/CodeSignVerify.ps1 -MsiPath $_.FullName -ReportPath "$(Build.BinariesDirectory)/Results/$($_.Name).html" }
          errorActionPreference: continue
          ignoreLASTEXITCODE: true

      - task: CopyFiles@2
        displayName: 'Copy Verify Results' 
        inputs:
          SourceFolder: '$(Build.BinariesDirectory)/Results'
          Contents: '*.html'
          TargetFolder: '$(Build.StagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish MSI and Result html'
        inputs:
          PathtoPublish: '$(Build.StagingDirectory)'
          timeoutInMinutes: 0
          condition: always()

      - ${{ if eq(parameters.enableRegression, 'true') }}:
        - task: CopyFiles@2
          displayName: 'Copy MSI to share' 
          inputs:
            SourceFolder: '$(Build.BinariesDirectory)/drop'
            Contents: '**'
            TargetFolder: '$(build.sharePath)/$(test.buildTag)'

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run RDPServer_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\RDPServer_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'RDPServer'))
        
        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run RDPClient_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\RDPClient_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'RDPClient'))
        
        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-SMB_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-SMB_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-SMB'))
        
        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-AZOD_SingleDomain_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-AZOD_SingleDomain_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-AZOD'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-AZOD_CrossDomain_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-AZOD_CrossDomain_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-AZOD'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-ADOD_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-ADOD_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-ADOD'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-ADFSPIP_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-ADFSPIP_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-ADFSPIP'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run Kerberos_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\Kerberos_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'Kerberos'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run FileServer_Standard_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\FileServer_Standard_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'FileServer'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run FileServer_Cluster_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\FileServer_Cluster_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'FileServer'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run BranchCache_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\BranchCache_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'BranchCache'))

        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run ADFamily_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\ADFamily_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'ADFamily'))
        
        - task: jb.queue-build.queue-build-task.queue-build@2
          displayName: Run MS-SMBD_Local_Regression
          inputs:
            buildDefinitionName: 'Local Regression\MS-SMBD_Local_Regression'
            buildConfigurationType: json
            buildConfiguration: |
              {
                "sourceBranch": "$(Build.SourceBranch)",
                "parameters": {
                  "test.sourceBuildTag": "$(test.buildTag)"
                }
              }
            async: true
          condition: or(eq(variables['test.testSuiteName'], '$null'), eq(variables['test.testSuiteName'], 'MS-SMBD'))